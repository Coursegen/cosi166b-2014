---
title: Techniques for Scaling
---
#### Techniques: Caching
* Save the result of a request with a given set of parameters.
* In a future request with the same parameter (maybe) return the same result
* Memoization: 
  * caching applied to an individual method
  * A basic programming technique
* System level caching. Storage:
  * In 'local' memory
  * In 'remote' memory
  * In database
  * In Cloud
* Name-value databases
  * Very fast searches and lookups
  * Distributed searches and distributed databases
  * Robust across system and application failures
* References:
  * [Redis](http://redis.io)
  * [Memcached](http://memcached.org)
  * [Amazon Elastic Cache](http://aws.amazon.com/elasticache/)

#### Techniques: Asycnhronous processing
* Real examples: <%= discussion "What do all of these have in common?" %>
  * Account registraton confirmation emails (actually all emails)
  * Daily (periodic or episodic) notification emails
  * Automatic backups or archiving
  * Image Resizing
  * Spam checking

* Synchronous: Caller **waits** for response
* Asynchronous: Request returns immediately, but result comes later

* <%= nb "web server mainly responds to http requests!" %>
* Background processing happens even if no requests!
* How do processes work in a modern Operating System?
  * Scheduler part of the OS
  * Processes can be fairly heavy weight
  * Let's estimate how many background processs you would need
  * How would you handle processes that:
    * Were taking too long?
    * Had crashed?
    * Needed to be restarted?
    * Or what if the server crashes as a whole?
    * It's a mess. Need abstractions!

##### Case 1: Schedule based
* CRON jobs. Most elementary. Require "privileges"
* Alternative: Native "scheduler" application (e.g. Heroku Simple Job Scheduler)
* References:
  * [Heroku Simple Job Scheduler](https://devcenter.heroku.com/articles/scheduled-jobs-custom-clock-processes#simple-job-scheduling)
  * [Unix Cron](http://en.wikipedia.org/wiki/Cron)
  * [Creating Cron Jobs on Mac](http://www.maclife.com/article/columns/terminal_101_creating_cron_jobs)
  * [Rails Runner](http://guides.rubyonrails.org/command_line.html#rails-runner)

##### Case 2: Request based
* Request handled 'asynchronously' of course
* By local server, in a separate process
* By a remote server
* Request queueing
  * What happens when requests come faster than we can handle them
  * How do we add more performance in handling request
* References
  * [Comparing Background processing Libraries](http://www.sitepoint.com/comparing-ruby-background-processing-libraries-delayed-job/)
  * [Rails Delayed Job Gem](https://github.com/collectiveidea/delayed_job)

#### Techniques: Databases
<%= discussion "What if all the user names are stored in one table on one server?" %>

* Databases are a major bottleneck! Must move the data to more than one machine!
* Need to undertand the access pattern: read intensive/write intensive
* Database Replication
  * What does it do
  * What are the benefits
* Database Partitioning
  * What are the different kinds: Horizontal and Vertical
  * What does it do
  * What are the benefits
* Database Sharding
  * What does it do
  * What are the benefits
* References
  * [The Basics Of Database Sharding](http://www.brentozar.com/archive/2013/05/the-basics-of-database-sharding/)