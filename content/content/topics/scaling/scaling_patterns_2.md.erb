---
title: Patterns In Scaling 2
---
### Scaling patterns
* Do more with the available resources
* Do more things at the same time
* Resource idle time is your enemy
  * CPU
  * Network
  * Disk
  * Database

#### Scenarios
* Users can ask for a detailed report about their twitter traffic
  * It can be a one shot, or regenerated at midnight
  * It can be displayed on the screen or emailed
  * Inline is no good because of computational cost and error handling
* Users tweet with attached images
  * Submitted in all kinds of formats, shapes and sizes
  * Need to convert and resize to standard shapes and sizes
  * Inline no good due to computational cost and error handling
* System sends an email to newly registered users
  * After creating the new user in db, send a confirm email with a link
  * Inline is no good, due to network latency and error handling

### Concurrency on a single Computer

* Difference between syncrhonous and asynchronous
* Difference between concurrent and parallel
* Operating Primitives (pretty much universal)
  * Processes ("forking")
    * Use more memory (new VM for each process)
      * for the data + the program + everything
      * "Copy on write"
    * Context switching very expensive
    * Communication expensive (IPC)
    * Slower to create and destroy
    * Less hard to program and debug (not easy!)
  * Threads
    * Use less memory (Shared memory space)
    * Context switching cheap
    * Communication cheap (via queues and shared memory)
    * Fast to create and destroy
    * Harder to program and debug
    * Assumes "Thread-safe" code
      * Ruby: See GIL
##### Demonstrations: 

### Queueing Systems: RabbitMQ

#### Key terms in RabbitMQ
* Producers: Software that sends messages 
* Consumers: Software that consumes (and processes) messages
* Queues: FIFO "holding area"  for messages
* Message: A bit of data which often incorporates an action or command
* Exchange: Receives messages from producers, and sticks them into a queue

#### Concepts in RabbitMQ
* Acknowledgement: So that if the server dies before finishing, the message gets given to someone else
* Durability: So that if the Queueing Service dies, the content of the queue survives


#### References
* [RabbitMQ Tutorial](https://www.rabbitmq.com/tutorials/tutorial-one-ruby.html)
* [Rabbit Demo (github)](https://github.com/Cosi-105/rabbit_demo)
* [Concurrency and Parallelism Blog Post](http://www.toptal.com/ruby/ruby-concurrency-and-parallelism-a-practical-primer)
* [Ruby Concurrency Exmplained](http://merbist.com/2011/02/22/concurrency-in-ruby-explained/)