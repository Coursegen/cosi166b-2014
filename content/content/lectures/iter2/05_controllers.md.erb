---
title: Understanding controllers
---
<%= homework_hdr %>
* Read AWDR Chapter 18 (Finding your way around Rails) and 19 (Active Record).
  * Keep a notepad handy, and write down several specific things that you still don't understand and several new cool things you learned.
  * Look over the directory tree of your Depot application and see if you can identify the different directories and their purposes.
  * Try to figure out and explain how it can be that the model.rb files have almost no code in them. For example in Depot, the product.rb file was almost empty. Where is the information about the tables and columns?
* Continue working with your team on your product!

<%= callout("REMINDER", " Your portfolios will be reviewed and graded TODAY for progress.") %>

#### Homework Discussion
* From the reading of the chapters

### Controllers and Resources

#### REST, Resources and Controllers
* We've had some discussions about designing URLs
* We talked about using a "directory structure-like" syntax for your URLs.
* Reference: [Rails Guide about Routing](http://guides.rubyonrails.org/routing.html)

#### Job of the controller
* Recall, the URL is parsed by the router, which locates and calls the right controller
* Breaking it down:
    1. Router parses URL
    1. Determines the controller (error: Can't find Controller's ruby file in app/controllers/)
    1. Determines the action insider the controller (error: Can't find a method for the action
    1. Calls the action method, with the parameters corresponding to the 'rest' of the url
    1. When action completes, a view of the same name is located (error: Can't find Views html.erb file in the views/<controllername>/ directory)
    1. View's 'erb' is expanded and returned, through controller, router, web server, back to the user.

#### Review of HTTP
* Lets go more in depth: <%= link_to_topic :http %>

#### Resources in Rails
* Automatic wiring of plumbing between urls, routing, models, and controllers
* Takes advantage of standardized patterns
    * Nesting model in the URLs
    * CRUD operations as actions
    * Path naming (path_to_user instead of "")
    * Controller naming
* Huge time saver and bug saver!

#### Controller Actions
* Who calls the controller action?
* What parameters are supplied automatically by the controller action?
* Sessions, why they are needed and how they work
* Why does it take two separate actions to implement "create"?


#### Demo
* Lets take a look: <%= link_to_topic :controllers_resources %>







