---
title: Authentication
homework: REad [AWDRR] Chapter 14. Team implements authentication for their product
---
<%= homework_hdr %>
* Introduce testability to your product
  * Read up about the rails-admin gem and install it into your team product.
  * Every individual member of each product team writes at least 3 Minitest-spec tests for the product
  * <%= team_deliverable "Commit latest version of your product to github" %>
  * <%= deliverable "Source file with the tests that you wrote in the product" %>
* Introduce authentication to your product
  * Read [AWDRR] Chapter 14. This homework asks you to apply all the techniques from that chapter to your product. I have indicated how the work might be divided up. If you finish with 'your' part early you need to offer to help the other team members. I suggest that you all work around a table on your sections so you can ask questions etc. Check code into github regularly to allow sharing of the latest.
  * **Do not use the Devise gem unless you really really want to (suffer)**
  * Decide with your team:
    * What can an admin user do and not do
    * What can a regular user do and not do
    * What can someone who is not logged in do and not do
  * Team member 1: 
    * Create a User model along the same lines as the chapter. Also their controller and view and to allow users to be managed
    * Write a test that verifies that a non-logged in user can access "protected parts" of your app
  * Team member 2: 
    * Create and implement the Sessions controller, along the same line as the chapter
    * Add the necessary routes for sessions
    * Write the tests for the new controller
  * Team member 3:
    * Implement the "authorization" part of the Chapter: "Limiting Access" etc
    * Also write the tests for that part
  * Team member 4:
    * Implement logic and test to make sure last admin doesn't get deleted
  * <%= team_deliverable "link to your github account; a screencapture demonstrating that what you implemented works and that tests run." %> (how to do a <%= link_to_topic :screencast %>)

#### Discussion

* [TeachBack](http://teachback.herokuapp.com)
  * Student pin: 9334206
  * TA pin: 7698318
* Homeworks
  * Team deliverables
  * Testing
  * Authentication
* Spark Grant
* [RailsTutorial book](https://www.railstutorial.org/book)

#### Review of controllers

##### Resources in Rails
* Automatic wiring of plumbing between urls, routing, models, and controllers
* Takes advantage of standardized patterns
    * Nesting model in the URLs
    * CRUD operations as actions
    * Path naming (path_to_user instead of "")
    * Controller naming
* Huge time saver and bug saver!

##### Controller Actions
* Who calls the controller action?
* What parameters are supplied automatically by the controller action?
* Sessions, why they are needed and how they work
* Why does it take two separate actions to implement "create"?

#### Authentication

##### Introduction
* Beware: this is hairy
* As an app runs, need to know "who is logged in"
* Remember the case of "no one is logged in"
* User is designated internally by a User (or Account, or similar concept)

##### Mechanics
* Authentication support has to:
  * Present a log in page
  * Present a account creation page
  * Check the "credentials"
  * Make the identity of the logged in user 'globally available' within your app
  * What is the 'identify of the logged in user?', it's just a method called 'logged_in_user' that when called returns an instance of the User model.
* But should not:
  * Decide what operations that user may do or not. Conceptually and architecturally, should be kept separately
  * Store the user's password in a database. How do you authenticate then?
* Authorization
  * Can "the currently logged in user" do this operation?
  * Often implemented with a list of "user types" (e.g. admin, professor, student)
  * And with a list of "operation types" (e.g. "administration", "read-write", "read-only")
  * Guard code in each controller/action

#### How it works in Rails
* <%= link_to_topic :basic_authentication %>

#### Look at next class
* Look at homework <%= link_to_next_lecture %>

